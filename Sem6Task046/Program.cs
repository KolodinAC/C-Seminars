//Задача 46: Задайте двумерный массив размером m×n, 
//заполненный случайными целыми числами.
//m = 3, n = 4. 

using static Common.Helper;

// Создаем метод для создания рандомного 2д массива

// int[,] array = CreateRandom2DArray(3, 4);        // создаем пустой массив для заполнения с размерностью 3 строки и 4 столбца и передаем его в наш метод для заполнения рандомными числами
// Print2DArray(array);


// Картежи: чтобы вывести две переменные и не в виде массива

// (int, int, string) coordinates = GetSomething();    // заводим двойную переменную чтобы положить в нее результат метода в виде 2 координат 

// System.Console.Write(coordinates.Item1);
// System.Console.Write(", " + coordinates.Item2);
// System.Console.WriteLine(", " + coordinates.Item3);


(int, int, string) GetSomething()                  // указываем в методе тип данных - два числа int через запятую, а вообще можно в скобки засунуть кучу разных типов данныз вместе
{
    int a = 5;                             // получаем значения в переменных из другого метода итп
    int b = 10;
    string t = "Fuck you asshole!";

    return (a, b, t);                        // возвращаем переменные которые соответствуют всем типам данных в скобках в заголовке метода, все типы данных должны быть возвращены
}

// Работа со строками:

int[] array = new int[3]{1, 2, 3};  // к примеру имеем массив и нам надо вывести его значения в строку
// первый вариант
string str = string.Join(", ", array);  // этот метод собирает в строчку значения например массива - первый аргумент "," это сепаратор, тобишь разделитель элементов, второй аргумент это значения которые надо соединить в строку
System.Console.WriteLine(str);
// второй вариант Format по типу интерполяции
string str2 = string.Format("Это означает {0} + {1} равно {2}", 1, 2, 3); // метод альтернатива интерполяции в строку, прописывается строка в качестве первого аргумета с метками индексов элементов которые туда вставить, а затем через запятую сами элементы по порядку, это могут быть и переменные и числа и символы и формулы и даже целые методы
System.Console.WriteLine(str2);
// третий вариант Контагинация
string str3 = "Это означает " + GetSomething().Item1 + " равно" + " " + "что-то тут " + 2 + " " + GetSomething().Item3; // этот вариант (контагинация) возможен  но плохой, не стоит так делать, занимает много новых строк(когда стоит плюс это создает новую строку) а это память 
System.Console.WriteLine(str3);
// четвертый вариант Concat
string.Concat("", "", "");  // оптимизированный варинт
// пятый вариант isNull
string.IsNullOrWhiteSpace("   "); // булевый метод, выдает тру и фолс, проверяет строка null(тоесть объекта не существует, тоесть памяти под него не выделено), пустая или там пробелы
// метод Compare - сравнивает две строки, часто используется для сравнения при сортировки например что больше что меньше 
string.Compare("", "");
// метод EndWith и StartWith - ловят строку если она начинается на что то или заканчивается чем-то выдает тру и фолс есть или нет того что ищем
str2.EndsWith("123");
str2.StartsWith("123");
// метод Containes - ищет есть ли в строки какая то подстрока - типа строка 12345 а надо найти 234 в ней и если оно есть то выдает тру и наоборот фолс
str2.Contains("234"); 
// метод Distinct - убирает дубли значений кроме первого
str2.Distinct();
// метод Remove - работает с коллекциями, удаляет куски массива. первым аргументом указываем с какого индекса начать удаление, вторым сколько элементов удалить, напрмер 5, 5 удалит 5 элементов начиная с элемента под индексом 5
str.Remove(5, 5);


// int[,] CreateRandom2DArray(int countOfRows, int countOfColumns)
// {
//     Random random = new Random();
//     int[,] array = new int[countOfRows, countOfColumns];

//     for (var i = 0; i < array.GetLength(0); i++)
//     {
//         for (int j = 0; j < array.GetLength(1); j++)
//         {
//             array[i, j] = random.Next(-10, 11);
//         }
//     }
//     return array;
// }